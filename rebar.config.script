TMPDIR = os:getenv("TMPDIR", "/tmp"),
Compile = fun(Name0, Prog) ->
    Name = filename:join(TMPDIR, Name0),
    ok = file:write_file(Name, Prog, [write, exclusive]),
    Retval = os:cmd(["${CC-cc} -o /dev/null ", Name, " > /dev/null 2>&1; printf \"%d\" $?"]),
    ok = file:delete(Name),
    Retval =:= "0"
end,
Only = fun(OS, Supported, Unsupported) ->
    case os:type() of
        OS -> Supported();
        _ -> Unsupported()
    end
end,
Linux = fun(Name, Prog, Supported, Unsupported) ->
    Only(
        {unix,linux},
        fun() ->
            case Compile(Name, Prog) of
                true ->
                    Supported;
                false ->
                    Unsupported
            end
        end,
        fun() ->
            Unsupported
        end
    )
end,
Setns = fun(CONFIG) ->
    Prog = "
#define _GNU_SOURCE
#include <sched.h>
int main(int argc, char *argv[]) {
    (void)setns(0,0);
    return 0;
}",
    Define = os:getenv("ALCOVE_DEFINE", ""),
    Env = Linux("test_setns.c", Prog, Define ++ " -DHAVE_SETNS", Define),
    true = os:putenv("ALCOVE_DEFINE", Env),
    CONFIG
end,
Seccomp = fun(CONFIG) ->
    Prog = "
#include <linux/seccomp.h>
int main(int argc, char *argv[]) {
#ifdef SECCOMP_MODE_FILTER
    return 0;
#else
    return 1;
#endif
}",
    Define = os:getenv("ALCOVE_DEFINE", ""),
    Env = Linux("test_seccomp.c", Prog, Define ++ " -DHAVE_SECCOMP", Define),
    true = os:putenv("ALCOVE_DEFINE", Env),
    CONFIG
end,
lists:foldl(fun(Fun, Cfg) ->
        Fun(Cfg)
    end,
    CONFIG,
    [Setns, Seccomp]
).
