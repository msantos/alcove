TMPDIR = os:getenv("TMPDIR", "/tmp"),

Compile = fun(Name0, Prog) ->
    Name = filename:join(TMPDIR, Name0),
    ok = file:write_file(Name, Prog, [write, exclusive]),
    Cmd = erlang:open_port({spawn, ["${CC-cc} -o /dev/null ", Name]},
            [stream, exit_status]),
    Status = receive
        {Cmd, {exit_status, 0}} ->
            true;
        {Cmd, {exit_status, _}} ->
            false
    end,
    ok = file:delete(Name),
    Status
end,

Test = fun(Name, Prog, Supported, Unsupported) ->
    case Compile(Name, Prog) of
        true ->
            Supported;
        false ->
            Unsupported
    end
end,

Only = fun(OS, Name, Prog, Supported, Unsupported) ->
    case os:type() of
        OS ->
            Test(Name, Prog, Supported, Unsupported);
        _ ->
            Unsupported
    end
end,

Linux = fun(Name, Prog, Supported, Unsupported) ->
    Only({unix,linux}, Name, Prog, Supported, Unsupported)
end,

Append = fun(Str, Flag) ->
    string:join(sets:to_list(sets:add_element(Flag,
                    sets:from_list(string:tokens(Str, " ")))), " ")
end,

Setenv = fun(Key, Val) ->
    Cur = os:getenv(Key, ""),
    os:putenv(Key, Append(Cur, Val))
end,

%%
%% Tests
%%

% Support for fexecve(3)
Fexecve = fun(CONFIG) ->
    Prog = "
#include <unistd.h>
int main(int argc, char *argv[], char *envp[]) {
    (void)fexecve(0, argv, envp);
    return 0;
}",
    Flag = Test("test_fexecve.c", Prog, "-DHAVE_FEXECVE", ""),
    true = Setenv("ALCOVE_DEFINE", Flag),
    CONFIG
end,

% Linux: support for setns(2)
Setns = fun(CONFIG) ->
    Prog = "
#define _GNU_SOURCE
#include <sched.h>
int main(int argc, char *argv[]) {
    (void)setns(0,0);
    return 0;
}",
    Flag = Linux("test_setns.c", Prog, "-DHAVE_SETNS", ""),
    true = Setenv("ALCOVE_DEFINE", Flag),
    CONFIG
end,

% Linux: support for seccomp mode using prctl(2)
Seccomp = fun(CONFIG) ->
    Prog = "
#include <linux/seccomp.h>
int main(int argc, char *argv[]) {
#ifdef SECCOMP_MODE_FILTER
    return 0;
#endif
}",
    Flag = Linux("test_seccomp.c", Prog, "-DHAVE_SECCOMP", ""),
    true = Setenv("ALCOVE_DEFINE", Flag),
    CONFIG
end,

lists:foldl(fun(Fun, Cfg) ->
        Fun(Cfg)
    end,
    CONFIG,
    [Fexecve, Setns, Seccomp]
).
